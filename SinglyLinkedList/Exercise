/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        ListNode a = headA;
        ListNode b = headB;
        
        if (headA == null || headB == null) return null;
        
        while (a != b) { // && a.next != null && b.next != null && a.next != b.next
            b = b.next;
            if (b == null) {
                b = headB;
                a = a.next;
            }
            if (a == null) {
                b = null;
            }
        }
        return a;
    }        
    
    public ListNode removeNthFromEnd(ListNode head, int n) {        
        ListNode tail = head;
        ListNode prev = head;
        int size = 1;
        while (tail.next != null) {
            tail = tail.next;
            size++;
        }        
        if (size == 1) {            
            return null;
        }
        for (int i = 0; i < size - n - 1; i++) {
            prev = prev.next;
        }
        if (size - n <= 0) {
            head = prev.next;
            return head;
        }
        if (prev.next.next != null) prev.next = prev.next.next;
        else prev.next = null;
        return head;
    } 
    
    public ListNode reverseList(ListNode head) {
        ListNode pointer = head;
        if (head == null) return null;
        while (head.next != null) {
            ListNode tmp = head.next;
            if (tmp.next == null) head.next = null;
            else head.next = tmp.next;                        
            tmp.next = pointer;
            pointer = tmp;
        }
        head = pointer;        
        return head;
    }
    
    public ListNode removeElements(ListNode head, int val) {
        
        ListNode slow = new ListNode(0);
        slow.next = head;
        ListNode fast = head;        
        
        while (fast != null) {
            if (fast.val == val) {
                if (fast == head) head = head.next;
                if (fast.next == null) slow.next = null;
                slow.next = fast.next;
                fast = fast.next;
                continue;
            }
            fast = fast.next;
            slow = slow.next;
        }
        return head;        
    }
}
